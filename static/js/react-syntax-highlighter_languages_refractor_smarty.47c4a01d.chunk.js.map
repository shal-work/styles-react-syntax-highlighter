{"version":3,"sources":["../node_modules/refractor/lang/smarty.js","../node_modules/refractor/lang/markup-templating.js"],"names":["refractorMarkupTemplating","require","smarty","Prism","register","languages","comment","pattern","greedy","inside","php","alias","string","interpolation","expression","variable","keyword","lookbehind","delimiter","number","function","boolean","punctuation","operator","smartyPattern","RegExp","source","replace","hooks","add","env","smartyLiteralMode","buildPlaceholders","match","tokenizePlaceholders","module","exports","displayName","aliases","markupTemplating","getPlaceholder","language","index","toUpperCase","Object","defineProperties","value","placeholderPattern","replaceFilter","tokenStack","code","placeholder","i","length","indexOf","grammar","markup","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat"],"mappings":"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","file":"static/js/react-syntax-highlighter_languages_refractor_smarty.47c4a01d.chunk.js","sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = smarty\nsmarty.displayName = 'smarty'\nsmarty.aliases = []\nfunction smarty(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    Prism.languages.smarty = {\n      comment: {\n        pattern: /^\\{\\*[\\s\\S]*?\\*\\}/,\n        greedy: true\n      },\n      'embedded-php': {\n        pattern: /^\\{php\\}[\\s\\S]*?\\{\\/php\\}/,\n        greedy: true,\n        inside: {\n          smarty: {\n            pattern: /^\\{php\\}|\\{\\/php\\}$/,\n            inside: null // see below\n          },\n          php: {\n            pattern: /[\\s\\S]+/,\n            alias: 'language-php',\n            inside: Prism.languages.php\n          }\n        }\n      },\n      string: [\n        {\n          pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n          greedy: true,\n          inside: {\n            interpolation: {\n              pattern: /\\{[^{}]*\\}|`[^`]*`/,\n              inside: {\n                'interpolation-punctuation': {\n                  pattern: /^[{`]|[`}]$/,\n                  alias: 'punctuation'\n                },\n                expression: {\n                  pattern: /[\\s\\S]+/,\n                  inside: null // see below\n                }\n              }\n            },\n            variable: /\\$\\w+/\n          }\n        },\n        {\n          pattern: /'(?:\\\\.|[^'\\\\\\r\\n])*'/,\n          greedy: true\n        }\n      ],\n      keyword: {\n        pattern: /(^\\{\\/?)[a-z_]\\w*\\b(?!\\()/i,\n        lookbehind: true,\n        greedy: true\n      },\n      delimiter: {\n        pattern: /^\\{\\/?|\\}$/,\n        greedy: true,\n        alias: 'punctuation'\n      },\n      number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n      variable: [\n        /\\$(?!\\d)\\w+/,\n        /#(?!\\d)\\w+#/,\n        {\n          pattern: /(\\.|->|\\w\\s*=)(?!\\d)\\w+\\b(?!\\()/,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n          lookbehind: true\n        }\n      ],\n      function: {\n        pattern: /(\\|\\s*)@?[a-z_]\\w*|\\b[a-z_]\\w*(?=\\()/i,\n        lookbehind: true\n      },\n      'attr-name': /\\b[a-z_]\\w*(?=\\s*=)/i,\n      boolean: /\\b(?:false|no|off|on|true|yes)\\b/,\n      punctuation: /[\\[\\](){}.,:`]|->/,\n      operator: [\n        /[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/,\n        /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/,\n        /\\b(?:and|eq|gt?e|gt|lt?e|lt|mod|neq?|not|or)\\b/\n      ]\n    }\n    Prism.languages.smarty['embedded-php'].inside.smarty.inside =\n      Prism.languages.smarty\n    Prism.languages.smarty.string[0].inside.interpolation.inside.expression.inside =\n      Prism.languages.smarty\n    var string = /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|'(?:\\\\.|[^'\\\\\\r\\n])*'/\n    var smartyPattern = RegExp(\n      // comments\n      /\\{\\*[\\s\\S]*?\\*\\}/.source +\n        '|' + // php tags\n        /\\{php\\}[\\s\\S]*?\\{\\/php\\}/.source +\n        '|' + // smarty blocks\n        /\\{(?:[^{}\"']|<str>|\\{(?:[^{}\"']|<str>|\\{(?:[^{}\"']|<str>)*\\})*\\})*\\}/.source.replace(\n          /<str>/g,\n          function () {\n            return string.source\n          }\n        ),\n      'g'\n    ) // Tokenize all inline Smarty expressions\n    Prism.hooks.add('before-tokenize', function (env) {\n      var smartyLiteralStart = '{literal}'\n      var smartyLiteralEnd = '{/literal}'\n      var smartyLiteralMode = false\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'smarty',\n        smartyPattern,\n        function (match) {\n          // Smarty tags inside {literal} block are ignored\n          if (match === smartyLiteralEnd) {\n            smartyLiteralMode = false\n          }\n          if (!smartyLiteralMode) {\n            if (match === smartyLiteralStart) {\n              smartyLiteralMode = true\n            }\n            return true\n          }\n          return false\n        }\n      )\n    }) // Re-insert the tokens after tokenizing\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty')\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function (env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            ) {\n              ++i\n            } // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function (env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n"],"sourceRoot":""}